---
title: "Rapport de laboratoire 2"
subtitle: "MTH8408"
author:
  - name: Yasmine Amami
    email: yasmine.amami.adresse@polymtl.ca
    affiliation:
      - name: Polytechnique Montréal
format:
  pdf:
    keep-tex: false
    documentclass: article
    include-in-header:
      - text: |
            \usepackage{eulervm}
            \usepackage{xspace}
            \usepackage[francais]{babel}
    geometry:
      - margin=1in
    papersize: letter
    colorlinks: true
    urlcolor: blue
engine: julia
---

```{julia}
#| output: false
using Pkg
Pkg.activate("labo2_env")
using LinearAlgebra
using Printf
```

# Contexte

Dans ce laboratoire, on demande d'implémenter deux méthodes itératives pour résoudre
$$
  \min_x \ g^T x + \tfrac{1}{2} x^T H x
$$ {#eq-qp}
où $g \in \mathbb{R}^n$ et $H$ est une matrice $n \times n$ symétrique et définie positive.

# Question 1

En cours, nous avons vu la méthode de la plus forte pente avec recherche linéaire exacte pour résoudre ([-@eq-qp]).

Dans cette question, on demande d'implémenter et de tester cette méthode sur divers objectifs quadratiques convexes.

Votre implémentation doit avoir les caractéristiques suivantes :

1. un critère d'arrêt absolu et relatif sur le gradient de l'objectif ;
2. un critère d'arrêt portant sur le nombre d'itérations (le nombre maximum d'itérations devrait dépendre du nombre de variables $n$ du problème) ;
2. toujours démarrer de l'approximation initiale $0$ ;
3. allouer un minimum en utilisant les opérations vectorisées (`.=`, `.+`, `.+=`, etc.) autant que possible ;
4. calculer *un seul* produit entre $H$ et un vecteur par itération ;
5. n'utiliser $H$ qu'à travers des produits avec un vecteur (ne pas accéder aux éléments de $H$ ou indexer dans $H$) ;
5. ne dépendre que de `LinearAlgebra`.
6. votre fonction principale doit être documentée---reportez-vous à [https://docs.julialang.org/en/v1/manual/documentation](https://docs.julialang.org/en/v1/manual/documentation) ;
7. votre fonction doit faire afficher les informations pertinentes à chaque itération sous forme de tableau comme vu en cours.

Tester votre implémentation sur les problèmes quadratiques de la section *Problèmes test* ci-dessous.

```{julia}
"""
    steepest_qp(g, H, eps_a=1.0e-5, eps_r=1.0e-5)

# Arguments
- `g`: vecteur gradient (dimension n)
- `H`: matrice symetrique positive definie (n×n)
- `eps_a`: tolerance absolue pour la norme du gradient (par defaut: 1e-5)
- `eps_r`: tolerance relative pour la norme du gradient (par defaut: 1e-5)

# Retours
- `x`: solution optimale
- `iter`: nombre d'iterations
- `converged`: true si converge, false si max iterations atteint
"""
function steepest_qp(g, H, eps_abs=1.0e-5, eps_rel=1.0e-5)
    n = length(g)
    max_iter = 2 * n
    x = zeros(n)
    history = []
    x_exact = -H \ g

    println("Iter\t\t||résidu relatif||\t||erreur relatif||")

    for k in 1:max_iter
        gradient = g + H * x
        grad_norm = norm(gradient)

        # Critère d'arrêt
        if grad_norm ≤ eps_abs + eps_rel * norm(g)
            break
        end

        # Direction de descente
        direction = -gradient

        # Produit unique H * direction
        H_direction = H * direction

        # Recherche linéaire exacte
        alpha = dot(gradient, gradient) / dot(direction, H_direction)

        # Mise à jour
        x .+= alpha * direction

        # Évaluation de la fonction
        f_x = dot(g, x) + 0.5 * dot(x, H * x)

        # Calcul de l'erreur
        error = norm(x_exact - x)

        println(@sprintf("%d\t\t\t%.3e\t\t%.3e", k, grad_norm, error))


        # Historique
        push!(history, (iteration=k, x=copy(x), grad_norm=grad_norm))
    end
    return x, history
end
```

# Question 2

Dans cette question, on demande d'implémenter la méthode BFGS pour résoudre le problème quadratique convexe ([-@eq-qp]).

Votre implémentation doit avoir les mêmes caractéristiques qu'à la question 1.

Ici, on cherche notamment à valider le résultat disant que la méthode se termine en au plus $n$ itérations (en arithmétique exacte) et reconstruit $H$, c'est-à-dire que $B_k = H$ à la convergence.

Tester votre implémentation sur les problèmes quadratiques de la section *Problèmes test* ci-dessous.

```{julia}
"""
    bfgs_qp(g, H, eps_a=1.0e-5, eps_r=1.0e-5)

# Arguments
- `g`: vecteur gradient (dimension n)
- `H`: matrice symetrique positive definie (n×n)
- `eps_a`: tolerance absolue pour la norme du gradient (par defaut: 1e-5)
- `eps_r`: tolerance relative pour la norme du gradient (par defaut: 1e-5)

# Retours
- `x`: solution optimale
- `iter`: nombre d'iterations
- `converged`: true si converge, false si max iterations atteint
- `B`: approximation  BFGS 
"""
function bfgs_qp(g, H, eps_abs=1.0e-5, eps_rel=1.0e-5)
    n = length(g)
    max_iter = n
    x = zeros(n)
    B = Matrix(1.0I, n, n)  # Approximation initiale de H⁻¹
    history = []
    x_exact = -H \ g

    gradient_prev = g + H * x

    println("Iter\t\t||résidu relatif||\t||erreur relatif||")

    for k in 1:max_iter
        gradient = g + H * x
        grad_norm = norm(gradient)

        # Critère d'arrêt
        if grad_norm ≤ eps_abs + eps_rel * norm(g)
            break
        end

        # Direction de descente
        direction = -B * gradient

        # Produit unique H * direction
        H_direction = H * direction

        # Recherche linéaire exacte
        alpha = -dot(gradient, direction) / dot(direction, H_direction)

        # Mise à jour de x
        step = alpha * direction
        x .+= step

        # Mise à jour du gradient
        gradient_new = g + H * x
        y = gradient_new - gradient

        # Mise à jour BFGS
        rho = 1.0 / dot(y, step)
        I_n = I(n)
        V = I_n .- rho .* step * y'
        B .= V * B * V' .+ rho .* step * step'


        f_x = dot(g, x) + 0.5 * dot(x, H * x)

        # Calcul de l'erreur
        error = norm(x_exact - x)

        println(@sprintf("%d\t\t\t%.3e\t\t%.3e", k, grad_norm, error))

        # Historique
        push!(history, (iteration=k, x=copy(x), grad_norm=grad_norm))
        gradient_prev .= gradient_new
    end
    return x, history
end
```

# Résultats numériques

## Problèmes test

Votre premier problème test sera généré aléatoirement avec $n = 10$.

```{julia}
n = 10
g_rand = ones(n)
H_rand = randn(n, n)
H = H_rand' * H_rand
x, history = bfgs_qp(g_rand, H)
```

Utiliser ensuite les problèmes quadratiques convexes de la collection Maros et Meszaros.
Vous pouvez y accéder à l'aide de l'extrait de code suivant :
```{julia}
#| output: false
Pkg.add("QPSReader")  # collection + outils pour lire les problèmes

using QPSReader
using Logging
using SparseArrays

function get_gH(name, reg=0)
    mm_path = fetch_mm()  # chemin vers les problèmes sur votre disque
    qpdata = with_logger(Logging.NullLogger()) do
        readqps(joinpath(mm_path, name))
    end
    n = qpdata.nvar
    g = qpdata.c
    H = Symmetric(sparse(qpdata.qrows, qpdata.qcols, qpdata.qvals, n, n) + reg * I, :L)
    return g, H
end
```

Les noms des problèmes sont listés sur [https://bitbucket.org/optrove/maros-meszaros/src/master/](https://bitbucket.org/optrove/maros-meszaros/src/master/).

Leurs dimensions sont donnés dans le tableau sur la page [https://www.doc.ic.ac.uk/~im/00README.QP](https://www.doc.ic.ac.uk/%7Eim/00README.QP) (avec des noms qui ne correspondent pas tout à fait ; les noms corrects sont ceux de la page Bitbucket).

NB : ces problèmes ont des contraintes, mais dans ce laboratoire, on les ignore.

Choisissez 3 problèmes :

* un avec $n \approx 10$ ;
* un avec $n \approx 50$ ;
* un avec $n \approx 100$.

```{julia}
g10, H10 = get_gH("DUALC1.SIF ", 1.0e-3)
g50, H50 = get_gH("QCAPRI.SIF", 1.0e-3)
g100, H100 = get_gH("QPILOTNO.SIF", 1.0e-3)
```

Attention :

* il se peut que $g = 0$---dans ce cas, changez $g$ en `ones(n)` ;
* il se peut que $H$ soit seulement semi-définie positive et pas définie positive---dans ce cas, ajoutez-lui un petit multiple de l'identité via, par exemple,

```julia
g, H = get_gH(name, 1.0e-3)
```


## Validation de la méthode de la plus forte pente

```{julia}
steepest_qp(g10, H10)
steepest_qp(g50, H50)
steepest_qp(g100, H100)
```

## Validation de la méthode BFGS

```{julia}
bfgs_qp(g10, H10)
bfgs_qp(g50, H50)
bfgs_qp(g100, H100)
```
